#!/bin/bash


#
# deploys a file to an Attic seed node using HTTP(S) with mutual authentication
# returns an attic:// URL pointing to where the file can be retrieved using the Adics protocol.
# This script requires curl 7.x.x to be available from the $PATH
#
# usage:
# script [options] <file-to-upload> <remote-host>

# options:
# -p : project name the file is associated with - optional default=noproject
# -n : name for the file - optional default=noname
# -r : specify the amount of times the files should be replicated in the network - optional default=unlimited
# -e : specify the expiry date of the data. This should of the format defined by RFC 822 and updated by RFC 1123, e.g.: "Sun, 05 Jun 2009 21:48:37 GMT"
# -c : uploader's certificate (in PEM format) - optional but may be required by server
# -k : uploader's private key (in PEM format) - optional but may be required by server
# -s : remote seed's CA certificate (in PEM format) - optional but may be required by server
# -d : a description for the file - optional
# -x : force XML rendition of data advert. optional - Default is JSON
# -i : interactive - optional. If this is set, the script will ask for confirmation from the user on the passed in arguments
# -v : verbose - optional. If set, status messages will be displayed
# -h : prints help
#
# any arguments with spaces must be enclosed in double quotes.
# All output from the script in interactive and verbose mode is sent to stderr apart from a successful result
# which is the attic URL. This is sent to stdout.
# This means the script can be piped or redirected.


# location header returned from server after posting data description and then after posting data.
# Initially this gives us where to post the File to. After File upload, this gives us the attic:// address
loc=""
# status code from response to uploading data description - should be in the 200 range
status=""

remotefile="false"
file=
host=
project="no project"
fname="no name"
desc="no description"
expires="Thu, 01 Jan 1970 00:00:01 GMT"
replica="2147483647"
cert=
key=
cacert=
interactive="false"
verbose="false"
curlOut=
md5=
fileSize=
xml="false"

vEcho() {
	if [ $verbose = "true" ]; then
		echo >&2 $1
	fi
}

eEcho() {
	echo >&2 $1
}

usage() {
	eEcho "$0 [options] file URL"
	eEcho "options:"
	eEcho "     [-c local certificate] your certificate (in PEM format)"
	eEcho "     [-k private key] your private key (in PEM format)"
	eEcho "     [-s server host certificate] the host's certificate (in PEM format)"
	eEcho "     [-p project] name of the project the file is associated with"
	eEcho "     [-r replication] the amount of times the files should be replicated in the network"
	eEcho "     [-e expiry date] This should of the format defined by RFC 822 and updated by RFC 1123, e.g.: \"Sun, 05 Jun 2009 21:48:37 GMT\""
	eEcho "     [-n file name] a name for the file"
	eEcho "     [-d description] a short description of the file"
	eEcho "     [-x xml] force XML rendition of data advert"
	eEcho "     [-i interactive mode] You will be asked if what you entered was correct"
	eEcho "     [-v verbose mode] Prints out status messages."
	eEcho "     [-h help] Prints this message."
}

printStatus () {
	case "$1" in
		"200") vEcho "The server says all looks good"
			return 0;;
		"201") vEcho "The server has created the resource"
			return 0;;
		"202") vEcho "The server has accepted the request"
			return 0;;
		"400") eEcho "The server reported a client error. Please review your options."
			return 1;;
		"401") eEcho "The server says you are unauthorized. Please review your certificates and key."
			return 1;;
		"403") eEcho "The server says you are forbidden access. Please review your certificates and key."
			return 1;;
		"404") eEcho "The server says it cannot find the resource. Please review your host path."
			return 1;;
		"500") eEcho "The server has reported a server error. Please contact the administrator of the remote host."
			return 1;;
		[?]) eEcho "The server responded with the the following status code: $1. This status code is considered to represent an unknown failure."
			return 1;;
	esac
}

toLower() {
	echo $1 | tr "[:upper:]" "[:lower:]"
}

while getopts p:n:c:k:s:d:e:r:ivhx opt; do
    case "$opt" in
        p) project="$OPTARG";;
		n) fname="$OPTARG";;
		c) cert="$OPTARG";;
		k) key="$OPTARG";;
		s) cacert="$OPTARG";;
		d) desc="$OPTARG";;
		e) expires="$OPTARG";;
		r) replica="$OPTARG";;
		x) xml="true";;
		i) interactive="true";;
		v) verbose="true";;
		h) usage; exit 0;;
        [?]) usage
            exit 1;;
    esac
done
shift $(($OPTIND - 1))

if [ "$1" ]; then
  if [[ $1 == http://* ]]; then
     remotefile="true"
  fi
  file=$1
fi

if [ "$2" ]; then
	host=$2
fi

if [ "$file" = "" ]; then
	eEcho "no file provided. Please supply the local file as the first argument.";
	usage;
	exit 1;
fi

if [ ! -f "$file" ]; then
   if [ $remotefile != "true" ]; then
	eEcho "The file you provided does not appear to exist.";
	usage;
	exit 1;
   fi
fi

if [ "$host" = "" ]; then
	eEcho "no host provided. Please supply the remote host as the second argument.";
	usage;
	exit 1;
fi

hostLen=$(echo ${#host});
if [ $hostLen -lt 10 ]; then
	eEcho "The host you provided does not look long enough. Please use a valid host name."
	exit 1;
fi

md5="`md5sum "$file" | awk '{print $1}'`"
fileSize=`ls -l "$file" | awk '{ print $5 }'`
lower=`toLower $host`
isSecure="false"

if [ "${lower:0:5}" = "https" ]; then
	isSecure="true"
fi

if [ "$cert" = "" ] && [ $isSecure = "true" ]; then
	eEcho "The host is using HTTPS but no local certificate in PEM format provided. Please use the -c option";
	usage;
	exit 1;
fi
if [ "$key" = "" ] && [ $isSecure = "true" ]; then
	eEcho "The host is using HTTPS but no local private key in PEM format provided. Please use the -k option";
	usage;
	exit 1;
fi
if [ "$cacert" = "" ] && [ $isSecure = "true" ]; then
	eEcho "The host is using HTTPS but no server CA certificate in PEM format provided. Please use the -s option";
	usage;
	exit 1;
fi

if [ $interactive = "true" ]; then
	eEcho
	eEcho "You gave the following parameters:"
	eEcho
	eEcho "Local file to upload  : $file"
	eEcho "Remote host           : $host"
	eEcho "File name             : $fname"
	eEcho "Project Name          : $project"
	eEcho "File description      : $desc"
	eEcho "Your certificate      : $cert"
	eEcho "Your private key      : $key"
	eEcho "Host CA certificate   : $cacert"
	eEcho

	echo -n >&2 "Is this OK? [n/y] "
	read answer
	if [ "$answer" != "y" ]; then
		eEcho
		eEcho "Quitting..."
		exit 0;
	fi
	eEcho
fi

contentType=""
DD=
if [ "$xml" = "false" ]; then
	# JSON representation of a DataAdvert
	DD="{\"DataAdvert\":{\"DataDescription\":{\"name\":\"$fname\",\"description\":\"$desc\",\"project\":\"$project\",\"FileHash\":{\"size\":$fileSize,\"hash\":\"$md5\"}},
	\"Constraints\":{\"Constraint\":[{\"type\":\"Date\",\"key\":\"expires\",\"value\":\"$expires\"},{\"type\":\"Integer\",\"key\":\"replica\",\"value\":\"$replica\"},{\"type\":\"Boolean\",\"key\":\"remotefile\",\"value\":\"$remotefile\"}]}}}"
	
	contentType="application/json"
	
else
	# XML representation of a DataAdvert
	DD="<?xml version=\"1.0\" encoding=\"UTF-8\"?><DataAdvert xmlns=\"http://atticfs.org\"><DataDescription><name>$fname</name><description>$desc</description>
	<project>$project</project><FileHash><size>$fileSize</size><hash>$md5</hash></FileHash></DataDescription>
	<Constraints><Constraint type=\"Date\"><key>expires</key><value>$expires</value></Constraint>
	<Constraint type=\"Integer\"><key>replica</key><value>$replica</value></Constraint>
	<Constraint type=\"Boolean\"><key>remotefile</key><value>$remotefile</value></Constraint></Constraints>
	</DataAdvert>"
	
	contentType="text/xml"
fi

echo $DD

# send the DataDescription to the seed
#=========================SEND===========================#
if [ $isSecure = "false" ]; then
	curlOut=$( curl -k -H Content-Type:$contentType -H Connection:Close -D headers.txt -X POST -d "$DD" $host 2>&1 )
else
	curlOut=$( curl -k --cert "$cert" --cert-type PEM --cacert "$cacert" --key "$key" -H Content-Type:$contentType -H Connection:Close -D headers.txt -X POST -d "$DD" $host 2>&1 )
fi
upload=$?
#========================================================#
if [ $upload -ne 0 ]; then
	eEcho "There was an error uploading:"
	echo >&2 $curlOut
	exit 1;
fi

if [ ! -f headers.txt ]; then
	eEcho "HTTP headers were not captured. Cannot continue..."
	exit 1;
fi

exec < headers.txt
while read LINE
do
	if [ "${LINE:0:8}" = "HTTP/1.1" ]; then
		status=${LINE#*HTTP/1.1};
		status=${status#* };
		status=${status%% *};
	elif [ "${LINE:0:8}" = "Location" ]; then
		loc=$LINE;
		loc=${loc#*Location};
		loc=${loc#*:};
		loc=${loc#* };
		loc=${loc% *};
	fi
done

printStatus $status
good=$?
if [ "$good" = 1 ]; then
	rm -rf headers.txt
	exit 1;
fi

if [ "$loc" = "" ]; then
	eEcho "location header was not supplied in response headers. Cannot continue..."
	rm -rf headers.txt
	exit 1;
fi

#rm -rf headers.txt

vEcho "Proceeding with file upload..."

if [ $remotefile = "false" ]; then

#=========================SEND==========================#
if [ $isSecure = "false" ]; then
	curlOut=$( curl -k -D headers.txt -X POST -H Transfer-Encoding:chunked -T "$file" $loc 2>&1 )
else
	curlOut=$( curl -k --cert "$cert" --cert-type PEM --cacert "$cacert" --key "$key" -D headers.txt -X POST -H Transfer-Encoding:chunked -T "$file" $loc 2>&1 )
fi
upload=$?
#=======================================================#

if [ $upload -ne 0 ]; then
	eEcho "There was an error uploading:"
	echo >&2 $curlOut
	exit 1;
fi

vEcho "Upload complete."
fi

vEcho $curlOut

if [ ! -f headers.txt ]; then
	eEcho "HTTP headers were not captured. Cannot continue..."
	exit 1;
fi

exec < headers.txt
while read LINE
do
	if [ "${LINE:0:8}" = "HTTP/1.1" ]; then
		status=${LINE#*HTTP/1.1};
		status=${status#* };
		status=${status%% *};
	elif [ "${LINE:0:8}" = "Location" ]; then
		loc=$LINE;
		loc=${loc#*Location};
		loc=${loc#*:};
		loc=${loc#* };
		loc=${loc% *};
	fi
done

printStatus $status
good=$?
if [ "$good" = 1 ]; then
	#rm -rf headers.txt
	exit 1;
fi

#rm -rf headers.txt

vEcho "File successfully transferred."
vEcho "The location of the data is:"
echo $loc




